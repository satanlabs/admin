{"version":3,"sources":["views/QRCodeGenerator/QRCodeGenerator.js"],"names":["QRCodeGenerator","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","generateQR","item","setState","isLoaded","size","length","factor","qrValue","resetPage","state","_createClass","key","value","_this2","_jsxs","Card","children","_jsx","rows","cols","onInput","target","this","QRCode","Component"],"mappings":"sQAKMA,EAAe,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAEjB,SAAAA,EAAYK,GAAO,IAADC,EAMZ,OANYC,YAAA,KAAAP,IACdM,EAAAH,EAAAK,KAAA,KAAMH,IAQVI,WAAa,SAACC,GAMV,GALAJ,EAAKK,SAAS,CACVC,UAAU,EACVC,KAAM,IAGPH,EAAKI,OAAS,EAAE,CACf,IAAMC,EAASL,EAAKI,OAAS,IAAM,EAEnCR,EAAKK,SAAS,CACVK,QAASN,EACTE,UAAU,EACVC,KAAM,IAAME,GAEpB,CACJ,EAACT,EAEDW,UAAW,WACPX,EAAKK,SAAS,CACVK,QAAS,GACTJ,UAAU,EACVC,KAAM,KAEd,EA9BIP,EAAKY,MAAQ,CACTF,QAAS,GACTJ,UAAU,EACVC,KAAM,KACRP,CACN,CAkDC,OAlDAa,YAAAnB,EAAA,EAAAoB,IAAA,SAAAC,MA2BD,WAAU,IAADC,EAAA,KACL,OACIC,eAACC,IAAI,CAAAC,SAAA,CACDC,cAAA,MAAAD,SAAI,0BAEJC,cAAA,YACIC,KAAM,EACNC,KAAM,GACNC,QAAS,SAACnB,GAAWY,EAAKb,WAAWC,EAAKoB,OAAOT,MAAQ,IAE7DK,cAAA,SACAH,eAAA,MAAAE,SAAA,CAAI,oBAAmBM,KAAKb,MAAMF,QAAQF,UAC1CY,cAAA,SAGKK,KAAKb,MAAMN,UACZc,cAACM,IAAM,CACHnB,KAAMkB,KAAKb,MAAML,KACjBQ,MAAOU,KAAKb,MAAMF,YAKtC,KAAChB,CAAA,CA3DgB,CAASiC,aA+DfjC,W","file":"static/js/73.aee17cec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport QRCode from \"qrcode.react\";\nimport { Card } from 'reactstrap';\n\n\nclass QRCodeGenerator extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            qrValue: \"\",\n            isLoaded: false,\n            size: 128\n        };\n    }\n\n    generateQR = (item) => {\n        this.setState({\n            isLoaded: false,\n            size: 0\n        });\n        \n        if(item.length > 0){\n            const factor = item.length / 250 + 1;\n            \n            this.setState({\n                qrValue: item,\n                isLoaded: true,\n                size: 128 * factor\n            });\n        }\n    }\n\n    resetPage =() => {\n        this.setState({\n            qrValue: \"\",\n            isLoaded: false,\n            size: 128\n        });\n    }\n\n    render() {\n        return (\n            <Card>\n                <h1>QR-Code Generator !!!</h1>\n                \n                <textarea \n                    rows={5}\n                    cols={30}\n                    onInput={(item) => { this.generateQR(item.target.value); }}    \n                />\n                <br />\n                <h3>Char(s). count : { this.state.qrValue.length }</h3>\n                <br />\n\n                {\n                    (this.state.isLoaded) &&\n                    <QRCode \n                        size={this.state.size}\n                        value={this.state.qrValue}\n                    />\n                }\n            </Card>\n        )\n    }\n\n}\n\nexport default QRCodeGenerator;"],"sourceRoot":""}