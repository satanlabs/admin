{"version":3,"sources":["views/Calendar/CalendarUtils.js","views/Reminder/CreateReminder.js"],"names":["allWeekdays","name","abbreviation","allMonths","noOfDays","getMonthInfo","month","year","monthInfo","Error","compareDates","date1String","date2String","d1","Date","d2","diff","getTime","CreateReminder","Component","constructor","props","super","submitForm","event","preventDefault","data","target","newReminderTitle","value","newReminderStartDate","newReminderStartTime","newReminderText","newReminderNote","this","state","reminderRepeats","repeats","repetitionType","newReminderRepetitionType","repetitionFrequency","newReminderRepetitionFrequency","reminderEnds","endsOnDate","newReminderEndsOnDate","startDate","alert","ends","jsonDataInStringFormat","JSON","stringify","console","log","toggleEndsOnSection","setState","checked","toggleReminderRepeatsSection","isLoaded","componentDidMount","document","title","todayDateStr","moment","format","render","FILE_NAME","_jsx","children","_jsxs","onSubmit","type","id","required","defaultValue","style","width","height","defaultChecked","onChange","rows","cols","backgroundColor","placeholder"],"mappings":"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","file":"static/js/67.5ef37162.chunk.js","sourcesContent":["\n\nconst allWeekdays = [\n    { name: \"Sunday\", abbreviation: \"Sun\" },\n    { name: \"Monday\", abbreviation: \"Mon\" },\n    { name: \"Tuesday\", abbreviation: \"Tue\" },\n    { name: \"Wednesday\", abbreviation: \"Wed\" },\n    { name: \"Thursday\", abbreviation: \"Thu\" },\n    { name: \"Friday\", abbreviation: \"Fri\" },\n    { name: \"Saturday\", abbreviation: \"Sat\" }\n];\n\nconst allMonths = [\n    {\n        abbreviation: \"Jan\",\n        name: \"January\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Feb\",\n        name: \"February\",\n        noOfDays: 28\n    },\n    {\n        abbreviation: \"Mar\",\n        name: \"March\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Apr\",\n        name: \"April\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"May\",\n        name: \"May\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Jun\",\n        name: \"June\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Jul\",\n        name: \"July\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Aug\",\n        name: \"August\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Sep\",\n        name: \"September\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Oct\",\n        name: \"October\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Nov\",\n        name: \"November\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Dec\",\n        name: \"December\",\n        noOfDays: 31\n    }\n];\n\n/*\nfor : January 2020\ninput -> 0 , 2020 \n*/\nconst getMonthInfo = (month, year) => {\n    if (month >= 0 && month <= 11 && year > 0) {\n        let monthInfo = allMonths[month];\n\n        if (month == 1 && year % 4 == 0) {\n            monthInfo.noOfDays = 29;\n        }\n\n        return monthInfo;\n    }\n    else {\n        throw Error();\n    }\n}\n\n\nconst getWeekdayInfo = (someDay) => {\n    return allWeekdays[someDay.getDay()];\n}\n\n/*\naccepts date-string in format : `YYYY-MM-DD`\n\nreturns :\n -1 if `date1` is bigger,\n +1 if `date2` is bigger,\n  0 if both are equal.\n*/\nconst compareDates = (date1String, date2String) => {\n    const d1 = new Date(date1String);\n    const d2 = new Date(date2String);\n    const diff = d1.getTime() - d2.getTime();\n\n    if(diff > 0)\n        return -1;\n    else if(diff < 0)\n        return +1;\n    else\n        return 0;\n}\n\nexport {\n    allWeekdays,\n    allMonths,\n    getMonthInfo,\n    getWeekdayInfo,\n    compareDates\n};\n\n\n\n\n\n\n","//Reminder.js\n\n/*\n * Reminder\n *\n * List all the features :\n *  - save a repeating ( OR a non-repeating ) reminder to the server.\n */\nimport React, { Component } from 'react';\nimport { compareDates } from '../Calendar/CalendarUtils';\nimport moment from 'moment';\n\n\nconst FILE_NAME = \"CreateReminder.js\";\n\nclass CreateReminder extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            reminderEnds: true,\n            reminderRepeats: false\n        };\n    }\n\n    componentDidMount() {\n        document.title = \"Satanlabs - Submit a new reminder request\";\n        const todayDateStr = moment().format(\"YYYY-MM-DD\");\n        console.log(todayDateStr);\n    }\n\n    submitForm = (event) => {\n        event.preventDefault();\n\n        let data = {\n            \"title\"     : event.target.newReminderTitle.value,\n            \"startDate\" : event.target.newReminderStartDate.value,\n            \"startTime\" : event.target.newReminderStartTime.value,\n            \"text\"      : event.target.newReminderText.value,\n            \"notes\"     : event.target.newReminderNote.value,\n\n            \"repeats\"   : false,\n            \"repetitionType\" : null,\n            \"repetitionFrequency\" : null,\n\n            \"ends\"       : false,\n            \"endsOnDate\" : null\n        };\n\n        if(this.state.reminderRepeats) {\n            data.repeats = true;\n            data.repetitionType = event.target.newReminderRepetitionType.value;\n            data.repetitionFrequency = event.target.newReminderRepetitionFrequency.value;\n\n            if(this.state.reminderEnds) {\n                //:todo - add check that the `endsOndate` is gr8er than the `startDate`\n                const endsOnDate = event.target.newReminderEndsOnDate.value;\n\n                if(compareDates(data.startDate, endsOnDate)  !== 1) {\n                    alert(\"FAILURE : ❌ ❌ ❌ : `Ends-on date` should be greater than `start-date`.\");\n                    return;\n                }\n                \n                data.ends = true;\n                data.endsOnDate = endsOnDate;\n            }\n        }\n\n        //:TODO - call API and save data\n        const jsonDataInStringFormat = JSON.stringify(data);\n        console.log(jsonDataInStringFormat);\n        alert(\"SUCCESS : ✅ ✅ ✅ : \" + jsonDataInStringFormat);\n    }\n\n    toggleEndsOnSection = (event) => {\n        this.setState({\n            reminderEnds: event.target.checked\n        });\n    }\n\n    toggleReminderRepeatsSection = (event) => {\n        this.setState({\n            reminderRepeats: event.target.checked\n        });\n    }\n\n    render() {\n        console.log(FILE_NAME + \" render() : this.state :\", this.state);\n\n        return (\n            <div>\n                <form onSubmit={this.submitForm}>\n\n                    <b>Title : </b>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <input type=\"text\" name=\"newReminderTitle\" id=\"newReminderTitle\" required={true} />\n                    <br /><br />\n\n                    {\n                      (this.state.reminderRepeats) ? \n                      <b>Start Reminding me on :</b>  : <b>Remind me on :</b>\n                    }\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <br /><br />\n                    DATE : <input type=\"date\" name=\"newReminderStartDate\" id=\"newReminderStartDate\" required={true} />\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    TIME : <input type=\"time\" name=\"newReminderStartTime\" id=\"newReminderStartTime\" required={true} defaultValue=\"19:00\" />\n                    <br /><br />\n\n                    <b>Repeats ?</b>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <input type=\"checkbox\" id=\"reminderRepeats\" name=\"reminderRepeats\" style={{ width: \"20px\", height: \"20px\" }} defaultChecked={this.state.reminderRepeats} onChange={this.toggleReminderRepeatsSection} />\n                    <br /><br />\n\n                    {\n                        (this.state.reminderRepeats == true) &&\n                        (\n                            <div>\n                                <b>REMINDER TYPE : </b>\n                                Repeat after every \n                                &nbsp;&nbsp;&nbsp;&nbsp; \n                                <input type=\"number\" name=\"newReminderRepetitionFrequency\" id=\"newReminderRepetitionFrequency\" defaultValue={1} required={true} />\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n                                <select required={true} name=\"newReminderRepetitionType\" id=\"newReminderRepetitionType\">\n                                    <option value=\"\">select a value</option>\n                                    <option value=\"min\">Minute(s)</option>\n                                    <option value=\"hour\">Hour(s)</option>\n                                    <option value=\"day\">Day(s)</option>\n                                    <option value=\"week\">Week(s)</option>\n                                    <option value=\"month\">Month(s)</option>\n                                    <option value=\"year\">Year(s)</option>\n                                </select>\n                                <br /><br />\n\n                                <b>Ends ?</b>\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n                                <input type=\"checkbox\" id=\"reminderEnds\" name=\"reminderEnds\" style={{ width: \"20px\", height: \"20px\" }} defaultChecked={this.state.reminderEnds} onChange={this.toggleEndsOnSection} />\n                                <br /><br />\n\n                                {\n                                    (this.state.reminderEnds) &&\n                                    (\n                                        <div>\n                                            <b>Ends on :</b>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\n                                            DATE : <input type=\"date\" name=\"newReminderEndsOnDate\" id=\"newReminderEndsOnDate\" required={true} />\n                                            <br /><br />\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        )\n                    }\n\n                    \n                    <b>ACTUAL REMINDER TEXT : ( CAUTION : THIS WILL BE ACTUALLY ANNOUNCED, via the speaker ... ) </b>\n                    <br />\n                    <textarea rows=\"5\" cols=\"50\" id=\"newReminderText\" style={{ backgroundColor: \"#ffdbde\" }} placeholder=\"Actual reminder message...\" required={true} />\n                    <br /><br />\n\n                    <b>REMINDER NOTES :</b>\n                    <br />\n                    <textarea rows=\"3\" cols=\"50\" id=\"newReminderNote\" style={{ backgroundColor: \"#ffdbde\" }} placeholder=\"Note for the reminder...\" required={true} />\n                    <br /><br />\n\n                    <input type=\"submit\" value=\"Add new reminder\" />\n                    <input type=\"reset\" value=\"Reset form\" />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default CreateReminder;"],"sourceRoot":""}