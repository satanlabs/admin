{"version":3,"sources":["Loading.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@babel/runtime/helpers/extends.js","views/CoronaGraph/CoronaGraph.js"],"names":["Loading","_jsx","className","children","CSpinner","color","size","_taggedTemplateLiteral","e","t","slice","Object","freeze","defineProperties","raw","value","_extends","module","exports","assign","bind","n","arguments","length","r","hasOwnProperty","call","__esModule","apply","types_of_data","graphScales","graphTypes","graphModes","COLORS","CoronaGraph","Component","constructor","props","super","cleanDataForPlotting","type_of_data","plotDatas","count","this","state","selectedCountries","forEach","selectedCountry","x","y","rawData","data","push","date","type","graphType","mode","graphMode","marker","name","concat","plotDataForSelectedCountries","setState","isLoaded","setTimeout","dataForPlot_new_cases","dataForPlot_new_deaths","dataForPlot_total_cases","dataForPlot_total_deaths","isLocationDataLoaded","isCoronaDataLoaded","graphScale","countriesData","componentDidMount","fetch","then","res","json","result","country","i","label","error","console","log","render","FILE_NAME","width","window","innerWidth","height","innerHeight","_jsxs","Select","isMulti","isClearable","onChange","options","Button","onClick","Plot","showlegend","layout","title","yaxis"],"mappings":"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","file":"static/js/32.c39278b4.chunk.js","sourcesContent":["import React from 'react';\nimport { CSpinner } from '@coreui/react';\n\nconst Loading = () =>\n    <div className=\"animated fadeIn pt-3 text-center\">\n        <CSpinner color=\"success\" size=\"sm\"/>\n    </div>\n    ;\nexport default Loading;","function _taggedTemplateLiteral(e, t) {\n  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, {\n    raw: {\n      value: Object.freeze(t)\n    }\n  }));\n}\nexport { _taggedTemplateLiteral as default };","function _extends() {\n  return (module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _extends.apply(null, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport Select from 'react-select';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Loading from '../../Loading';\n/*\n\n# CORONA DATA UPDATION SCRIPT\n# https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.json\n\nwget https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.json\n\nmv owid-covid-data.json corona_full_data.json\n\nmv corona_full_data.json /usr/lib/tomcat/apache-tomcat-8.5.35/webapps/assets/json/\n\necho \"updated corona data on -  $(date)\" > corona_update.json\n\n\n\n\n*/\n\nconst FILE_NAME = \"CoronaGraph.js\";\n\nconst CORONA_DATA_API = \"http://192.168.1.109/assets/json/corona_full_data.json\";\nconst LOCATION_API = \"http://192.168.1.109/assets/json/all_countries_iso.json\";\n\n// const CORONA_DATA_API = \"http://localhost:3000/assets/json/corona_full_data.json\";\n// const LOCATION_API = \"http://localhost:3000/assets/json/all_countries_iso.json\";\n\nconst types_of_data = [\n  \"new_cases\",\n  \"new_deaths\",\n  \"total_cases\",\n  \"total_deaths\"\n];\n\nconst graphScales = [ \"log\" , \"linear\" ];\nconst graphTypes  = [ \"scatter\" , \"bar\" ];\nconst graphModes  = [ \"lines\" , \"lines+markers\" , \"markers\" ];\n\nconst COLORS = [\n  \"red\",\"green\",\"blue\",\"#b59a14\",\"#b514a5\",\"black\",\"orange\"\n];\n\n\nclass CoronaGraph extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        isLocationDataLoaded: false,\n        isCoronaDataLoaded: false,\n        isLoaded: false,\n        graphScale: graphScales[1],\n        graphType: graphTypes[0],\n        graphMode: graphModes[1],\n        countriesData: [],\n        rawData: [],\n        selectedCountries: [],\n        dataForPlot_new_cases: {},\n        dataForPlot_new_deaths: {},\n        dataForPlot_total_cases: {},\n        dataForPlot_total_deaths: {}\n    };\n  }\n\n  componentDidMount(){\n      fetch(LOCATION_API)\n      .then(res => res.json())\n      .then(\n          (result) => {\n              //console.table(result);\n\n              let countriesData = [];\n              result.forEach( (country , i) => {\n                countriesData.push({value: country[\"alpha-3\"], label: country.name , ...country});\n              });\n              this.setState({\n                countriesData,\n                isLocationDataLoaded: true\n              });\n          },\n          (error) => {\n            console.log(\"ERROR :\" ,error);\n          }\n      );\n\n      fetch(CORONA_DATA_API)\n      .then(res => res.json())\n      .then(\n          (result) => {\n              //console.table(result);\n              this.setState({\n                rawData: result,\n                isCoronaDataLoaded: true\n              });\n          },\n          (error) => {\n            console.log(\"ERROR :\" ,error);\n          }\n      );\n  }\n\n  cleanDataForPlotting = (type_of_data) => {\n    let plotDatas = [];\n    let count = 0;\n\n    this.state.selectedCountries.forEach(selectedCountry => {\n      let x = [] , y = [];\n\n      const selectedCountryData = this.state.rawData[selectedCountry.value];\n      selectedCountryData.data.forEach(data => {\n        x.push(data.date);\n        y.push(data[type_of_data])\n      });\n\n      plotDatas.push(\n        {\n          x: [ ...x ],\n          y: [ ...y ],\n          type:this.state.graphType,\n          mode: this.state.graphMode,\n          marker: {color: COLORS[++count]},\n          name: `${selectedCountry.name} - ${type_of_data}`\n        }\n      );\n\n    });\n    \n    return plotDatas;\n  }\n\n  plotDataForSelectedCountries = () => {\n    if(this.state.selectedCountries.length == 0)\n      return;\n\n    this.setState({isLoaded:false});\n    setTimeout(()=>{\n      this.setState({\n        dataForPlot_new_cases: this.cleanDataForPlotting(types_of_data[0]),\n        dataForPlot_new_deaths: this.cleanDataForPlotting(types_of_data[1]),\n        dataForPlot_total_cases: this.cleanDataForPlotting(types_of_data[2]),\n        dataForPlot_total_deaths: this.cleanDataForPlotting(types_of_data[3]),\n        isLoaded: true\n      });\n    },250);\n    \n  }\n\n  render() {\n    console.log( FILE_NAME + \" render() : this.state :\" ,this.state);\n    const width = window.innerWidth * 0.94;\n    const height = window.innerHeight * 0.94;\n\n    return (\n      (this.state.isLocationDataLoaded && this.state.isCoronaDataLoaded) ? \n      <div>\n        <h1>Corona Graph Page</h1>\n        <br />\n\n        SELECT THE COUNTRIES : (or even a single one )\n        <Select\n          isMulti={true}\n          isClearable={true}\n          onChange={(e) =>{this.setState({selectedCountries : e});}} \n          options={this.state.countriesData}\n        />\n        <br />\n        <Button color=\"success\" size=\"lg\" onClick={this.plotDataForSelectedCountries}>Plot Data on Graph</Button>\n        <br /><br />\n\n        {\n          this.state.isLoaded &&\n          (<div>\n            <span>\n              <b>Change Scale :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphScale:\"linear\"})}}>LINEAR SCALE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphScale:\"log\"})}}>LOG SCALE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Scale : [ { this.state.graphScale } ]\n              <br /><br />\n            </span>\n\n            <span>\n              <b>Change Type :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphType: \"scatter\"}); this.plotDataForSelectedCountries(); }}>scatter TYPE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphType: \"bar\"}); this.plotDataForSelectedCountries(); }}>bar TYPE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Type : [ { this.state.graphType } ]\n              <br /><br />\n            </span>\n\n            <span>\n              <b>Change Mode :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"lines\"}); this.plotDataForSelectedCountries(); }}>lines MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"danger\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"lines+markers\"}); this.plotDataForSelectedCountries(); }}>lines+markers MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"markers\"}); this.plotDataForSelectedCountries(); }}>markers MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Mode : [ { this.state.graphMode } ]\n              <br /><br />\n            </span>\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_total_cases }\n              layout={ {width, height , title: 'Total cases', yaxis: {type: this.state.graphScale }} }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_total_deaths }\n              layout={ {width, height, title: 'Total Deaths', yaxis: {type: this.state.graphScale }} }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_new_cases }\n              layout={ {width, height, title: 'New cases - Daily' } }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_new_deaths }\n              layout={ {width, height, title: 'New Deaths - Daily' } }\n            />\n            \n            \n          </div> )\n        }\n\n      </div> : <Loading />\n    );\n  }\n}\n\nexport default CoronaGraph;\n"],"sourceRoot":""}