{"version":3,"sources":["views/Calendar/CalendarUtils.js","views/Reminder/ViewReminder.js"],"names":["allWeekdays","name","abbreviation","allMonths","noOfDays","getMonthInfo","month","year","monthInfo","Error","compareDates","date1String","date2String","d1","Date","d2","diff","getTime","ViewReminder","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","isLoaded","_createClass","key","value","document","title","todayDateStr","moment","format","console","log","FILE_NAME","this","_jsx","children","Component"],"mappings":"6KAEA,0GAAMA,EAAc,CAChB,CAAEC,KAAM,SAAUC,aAAc,OAChC,CAAED,KAAM,SAAUC,aAAc,OAChC,CAAED,KAAM,UAAWC,aAAc,OACjC,CAAED,KAAM,YAAaC,aAAc,OACnC,CAAED,KAAM,WAAYC,aAAc,OAClC,CAAED,KAAM,SAAUC,aAAc,OAChC,CAAED,KAAM,WAAYC,aAAc,QAGhCC,EAAY,CACd,CACID,aAAc,MACdD,KAAM,UACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,WACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,QACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,QACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,MACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,OACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,OACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,SACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,YACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,UACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,WACNG,SAAU,IAEd,CACIF,aAAc,MACdD,KAAM,WACNG,SAAU,KAQZC,EAAe,SAACC,EAAOC,GACzB,GAAID,GAAS,GAAKA,GAAS,IAAMC,EAAO,EAAG,CACvC,IAAIC,EAAYL,EAAUG,GAM1B,OAJa,GAATA,GAAcC,EAAO,GAAK,IAC1BC,EAAUJ,SAAW,IAGlBI,CACX,CAEI,MAAMC,OAEd,EAeMC,EAAe,SAACC,EAAaC,GAC/B,IAAMC,EAAK,IAAIC,KAAKH,GACdI,EAAK,IAAID,KAAKF,GACdI,EAAOH,EAAGI,UAAYF,EAAGE,UAE/B,OAAGD,EAAO,GACE,EACJA,EAAO,EACJ,EAEA,CACf,C,4HCvGME,EAAY,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAEd,SAAAA,EAAYK,GAAQ,IAADC,EAIb,OAJaC,YAAA,KAAAP,IACfM,EAAAH,EAAAK,KAAA,KAAMH,IACDI,MAAQ,CACTC,UAAU,GACZJ,CACN,CAgBC,OAhBAK,YAAAX,EAAA,EAAAY,IAAA,oBAAAC,MAED,WACIC,SAASC,MAAQ,4CACjB,IAAMC,EAAeC,MAASC,OAAO,cACrCC,QAAQC,IAAIJ,EAChB,GAAC,CAAAJ,IAAA,SAAAC,MAED,WAGI,OAFAM,QAAQC,IAAIC,0CAAwCC,KAAKb,OAGrDc,cAAA,OAAAC,SAAK,iBAIb,KAACxB,CAAA,CAvBa,CAASyB,aA0BZzB,W","file":"static/js/69.0597bc73.chunk.js","sourcesContent":["\n\nconst allWeekdays = [\n    { name: \"Sunday\", abbreviation: \"Sun\" },\n    { name: \"Monday\", abbreviation: \"Mon\" },\n    { name: \"Tuesday\", abbreviation: \"Tue\" },\n    { name: \"Wednesday\", abbreviation: \"Wed\" },\n    { name: \"Thursday\", abbreviation: \"Thu\" },\n    { name: \"Friday\", abbreviation: \"Fri\" },\n    { name: \"Saturday\", abbreviation: \"Sat\" }\n];\n\nconst allMonths = [\n    {\n        abbreviation: \"Jan\",\n        name: \"January\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Feb\",\n        name: \"February\",\n        noOfDays: 28\n    },\n    {\n        abbreviation: \"Mar\",\n        name: \"March\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Apr\",\n        name: \"April\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"May\",\n        name: \"May\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Jun\",\n        name: \"June\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Jul\",\n        name: \"July\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Aug\",\n        name: \"August\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Sep\",\n        name: \"September\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Oct\",\n        name: \"October\",\n        noOfDays: 31\n    },\n    {\n        abbreviation: \"Nov\",\n        name: \"November\",\n        noOfDays: 30\n    },\n    {\n        abbreviation: \"Dec\",\n        name: \"December\",\n        noOfDays: 31\n    }\n];\n\n/*\nfor : January 2020\ninput -> 0 , 2020 \n*/\nconst getMonthInfo = (month, year) => {\n    if (month >= 0 && month <= 11 && year > 0) {\n        let monthInfo = allMonths[month];\n\n        if (month == 1 && year % 4 == 0) {\n            monthInfo.noOfDays = 29;\n        }\n\n        return monthInfo;\n    }\n    else {\n        throw Error();\n    }\n}\n\n\nconst getWeekdayInfo = (someDay) => {\n    return allWeekdays[someDay.getDay()];\n}\n\n/*\naccepts date-string in format : `YYYY-MM-DD`\n\nreturns :\n -1 if `date1` is bigger,\n +1 if `date2` is bigger,\n  0 if both are equal.\n*/\nconst compareDates = (date1String, date2String) => {\n    const d1 = new Date(date1String);\n    const d2 = new Date(date2String);\n    const diff = d1.getTime() - d2.getTime();\n\n    if(diff > 0)\n        return -1;\n    else if(diff < 0)\n        return +1;\n    else\n        return 0;\n}\n\nexport {\n    allWeekdays,\n    allMonths,\n    getMonthInfo,\n    getWeekdayInfo,\n    compareDates\n};\n\n\n\n\n\n\n","//Reminder.js\n\n/*\n * Reminder\n *\n * List all the features :\n *  - save a repeating ( OR a non-repeating ) reminder to the server.\n */\nimport React, { Component } from 'react';\nimport { compareDates } from '../Calendar/CalendarUtils';\nimport moment from 'moment';\n\n\nconst FILE_NAME = \"ViewReminder.js\";\n\nclass ViewReminder extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false\n        };\n    }\n\n    componentDidMount() {\n        document.title = \"Satanlabs - Submit a new reminder request\";\n        const todayDateStr = moment().format(\"YYYY-MM-DD\");\n        console.log(todayDateStr);\n    }\n\n    render() {\n        console.log(FILE_NAME + \" render() : this.state :\", this.state);\n\n        return (\n            <div>\n                view reminder\n            </div>\n        );\n    }\n}\n\nexport default ViewReminder;"],"sourceRoot":""}