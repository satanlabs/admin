{"version":3,"sources":["Loading.js","views/CoronaGraph/CoronaGraph.js"],"names":["Loading","className","color","size","types_of_data","graphScales","graphTypes","graphModes","COLORS","CoronaGraph","props","cleanDataForPlotting","type_of_data","plotDatas","count","state","selectedCountries","forEach","selectedCountry","x","y","rawData","value","data","push","date","type","graphType","mode","graphMode","marker","name","plotDataForSelectedCountries","length","setState","isLoaded","setTimeout","dataForPlot_new_cases","dataForPlot_new_deaths","dataForPlot_total_cases","dataForPlot_total_deaths","isLocationDataLoaded","isCoronaDataLoaded","graphScale","countriesData","fetch","then","res","json","result","country","i","label","error","console","log","FILE_NAME","this","width","window","innerWidth","height","innerHeight","isMulti","isClearable","onChange","e","options","onClick","showlegend","layout","title","yaxis","Component"],"mappings":"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","file":"static/js/41.335a17cb.chunk.js","sourcesContent":["import React from 'react';\nimport { CSpinner } from '@coreui/react';\n\nconst Loading = () =>\n    <div className=\"animated fadeIn pt-3 text-center\">\n        <CSpinner color=\"success\" size=\"sm\"/>        \n    </div>\n    ;\nexport default Loading;","import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport Select from 'react-select';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Loading from '../../Loading';\n/*\n\n# CORONA DATA UPDATION SCRIPT\n# https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.json\n\nwget https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.json\n\nmv owid-covid-data.json corona_full_data.json\n\nmv corona_full_data.json /usr/lib/tomcat/apache-tomcat-8.5.35/webapps/assets/json/\n\necho \"updated corona data on -  $(date)\" > corona_update.json\n\n\n\n\n*/\n\nconst FILE_NAME = \"CoronaGraph.js\";\n\nconst CORONA_DATA_API = \"http://192.168.1.109/assets/json/corona_full_data.json\";\nconst LOCATION_API = \"http://192.168.1.109/assets/json/all_countries_iso.json\";\n\n// const CORONA_DATA_API = \"http://localhost:3000/assets/json/corona_full_data.json\";\n// const LOCATION_API = \"http://localhost:3000/assets/json/all_countries_iso.json\";\n\nconst types_of_data = [\n  \"new_cases\",\n  \"new_deaths\",\n  \"total_cases\",\n  \"total_deaths\"\n];\n\nconst graphScales = [ \"log\" , \"linear\" ];\nconst graphTypes  = [ \"scatter\" , \"bar\" ];\nconst graphModes  = [ \"lines\" , \"lines+markers\" , \"markers\" ];\n\nconst COLORS = [\n  \"red\",\"green\",\"blue\",\"#b59a14\",\"#b514a5\",\"black\",\"orange\"\n];\n\n\nclass CoronaGraph extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        isLocationDataLoaded: false,\n        isCoronaDataLoaded: false,\n        isLoaded: false,\n        graphScale: graphScales[1],\n        graphType: graphTypes[0],\n        graphMode: graphModes[1],\n        countriesData: [],\n        rawData: [],\n        selectedCountries: [],\n        dataForPlot_new_cases: {},\n        dataForPlot_new_deaths: {},\n        dataForPlot_total_cases: {},\n        dataForPlot_total_deaths: {}\n    };\n  }\n\n  componentDidMount(){\n      fetch(LOCATION_API)\n      .then(res => res.json())\n      .then(\n          (result) => {\n              //console.table(result);\n\n              let countriesData = [];\n              result.forEach( (country , i) => {\n                countriesData.push({value: country[\"alpha-3\"], label: country.name , ...country});\n              });\n              this.setState({\n                countriesData,\n                isLocationDataLoaded: true\n              });\n          },\n          (error) => {\n            console.log(\"ERROR :\" ,error);\n          }\n      );\n\n      fetch(CORONA_DATA_API)\n      .then(res => res.json())\n      .then(\n          (result) => {\n              //console.table(result);\n              this.setState({\n                rawData: result,\n                isCoronaDataLoaded: true\n              });\n          },\n          (error) => {\n            console.log(\"ERROR :\" ,error);\n          }\n      );\n  }\n\n  cleanDataForPlotting = (type_of_data) => {\n    let plotDatas = [];\n    let count = 0;\n\n    this.state.selectedCountries.forEach(selectedCountry => {\n      let x = [] , y = [];\n\n      const selectedCountryData = this.state.rawData[selectedCountry.value];\n      selectedCountryData.data.forEach(data => {\n        x.push(data.date);\n        y.push(data[type_of_data])\n      });\n\n      plotDatas.push(\n        {\n          x: [ ...x ],\n          y: [ ...y ],\n          type:this.state.graphType,\n          mode: this.state.graphMode,\n          marker: {color: COLORS[++count]},\n          name: `${selectedCountry.name} - ${type_of_data}`\n        }\n      );\n\n    });\n    \n    return plotDatas;\n  }\n\n  plotDataForSelectedCountries = () => {\n    if(this.state.selectedCountries.length == 0)\n      return;\n\n    this.setState({isLoaded:false});\n    setTimeout(()=>{\n      this.setState({\n        dataForPlot_new_cases: this.cleanDataForPlotting(types_of_data[0]),\n        dataForPlot_new_deaths: this.cleanDataForPlotting(types_of_data[1]),\n        dataForPlot_total_cases: this.cleanDataForPlotting(types_of_data[2]),\n        dataForPlot_total_deaths: this.cleanDataForPlotting(types_of_data[3]),\n        isLoaded: true\n      });\n    },250);\n    \n  }\n\n  render() {\n    console.log( FILE_NAME + \" render() : this.state :\" ,this.state);\n    const width = window.innerWidth * 0.94;\n    const height = window.innerHeight * 0.94;\n\n    return (\n      (this.state.isLocationDataLoaded && this.state.isCoronaDataLoaded) ? \n      <div>\n        <h1>Corona Graph Page</h1>\n        <br />\n\n        SELECT THE COUNTRIES : (or even a single one )\n        <Select\n          isMulti={true}\n          isClearable={true}\n          onChange={(e) =>{this.setState({selectedCountries : e});}} \n          options={this.state.countriesData}\n        />\n        <br />\n        <Button color=\"success\" size=\"lg\" onClick={this.plotDataForSelectedCountries}>Plot Data on Graph</Button>\n        <br /><br />\n\n        {\n          this.state.isLoaded &&\n          (<div>\n            <span>\n              <b>Change Scale :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphScale:\"linear\"})}}>LINEAR SCALE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphScale:\"log\"})}}>LOG SCALE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Scale : [ { this.state.graphScale } ]\n              <br /><br />\n            </span>\n\n            <span>\n              <b>Change Type :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphType: \"scatter\"}); this.plotDataForSelectedCountries(); }}>scatter TYPE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphType: \"bar\"}); this.plotDataForSelectedCountries(); }}>bar TYPE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Type : [ { this.state.graphType } ]\n              <br /><br />\n            </span>\n\n            <span>\n              <b>Change Mode :</b>&nbsp;&nbsp;\n              <Button color=\"primary\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"lines\"}); this.plotDataForSelectedCountries(); }}>lines MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"danger\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"lines+markers\"}); this.plotDataForSelectedCountries(); }}>lines+markers MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              <Button color=\"warning\" size=\"lg\" onClick={()=>{this.setState({graphMode: \"markers\"}); this.plotDataForSelectedCountries(); }}>markers MODE</Button>\n              &nbsp;&nbsp;&nbsp;&nbsp;\n              CURRENT Mode : [ { this.state.graphMode } ]\n              <br /><br />\n            </span>\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_total_cases }\n              layout={ {width, height , title: 'Total cases', yaxis: {type: this.state.graphScale }} }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_total_deaths }\n              layout={ {width, height, title: 'Total Deaths', yaxis: {type: this.state.graphScale }} }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_new_cases }\n              layout={ {width, height, title: 'New cases - Daily' } }\n            />\n\n            <br /><hr />\n\n            <Plot\n              showlegend={false}\n              data={ this.state.dataForPlot_new_deaths }\n              layout={ {width, height, title: 'New Deaths - Daily' } }\n            />\n            \n            \n          </div> )\n        }\n\n      </div> : <Loading />\n    );\n  }\n}\n\nexport default CoronaGraph;\n"],"sourceRoot":""}