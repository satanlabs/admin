{"version":3,"sources":["views/Statuses/Statuses.js","Utils/Utils.js","Rest-API/Header.js","views/Modals/StatusModal.js","views/Modals/FailureModal.js","Rest-API/EnvironmentSpecificThings.js","Utils/Enums.js","views/expenses/Product.js"],"names":["Failure","props","_jsxs","className","children","_jsx","style","color","fontSize","detailShow","Loading","role","Success","__DOUBLE_COLON__","reloadPage","window","location","reload","openPageInNewTab","url","open","getSearchResult","tmkocAllEpisodes","searchString","searchPositiveEpisodes","forEach","episode","checkIfStringContainsPattern","shortDesc","push","string","pattern","toUpperCase","includes","humanFileSize","bytes","si","arguments","length","undefined","dp","thresh","Math","abs","units","u","r","round","toFixed","Logger","fileName","methodName","message","variableName","variableValue","localStorage","logsEnabled","logData","console","log","goBack","history","back","goHome","filterById","jsonObject","id","result","filter","copyStringToClipboard","someStr","navigator","clipboard","writeText","CONTENT_TYPE_JSON_STRING","requestHeaderGET","method","headers","requestHeaderPOST","data","body","requestHeaderFilePOST","requestHeaderGETWithAuth","authToken","requestHeaderPOSTWithAuth","requestHeaderPUTWithAuth","requestHeaderDELETEWithAuth","StatusModal","Component","render","basic","this","loadingModalState","Modal","isOpen","visible","backdrop","ModalBody","FailureModal","ModalFooter","Button","onClick","BACKEND_AUTH_APP_BASE_URL","BACKEND_WEIGHT_SERVICE_BASE_URL","BACKEND_PRICE_TRACKER_SERVICE_BASE_URL","unitOfMeasurementsList","value","label","categoryTypesList","commodityTypesList","yesAndNoList","backendValue","paymentInstrumentsList","paymentBanksList","expenseModesList","FILE_NAME","initialState","isLoaded","loadingModalVisible","failureModalVisible","categoryListData","brandListData","productListData","categoryListDataSelectTagSpecific","brandListDataSelectTagSpecific","newProductData","categoryId","brandId","tableColumnData","accessorKey","header","enableEditing","Cell","_ref","renderedCellValue","row","name","unitOfMeasurement","_ref2","_ref3","moment","zone","format","_ref4","Product","constructor","super","submitCreateProductForm","event","preventDefault","reqData","target","inputName","doesStateContainAllRequiredProductParams","state","setState","callCreateProductApi","alert","JSON","parse","stringify","resetStateToDefault","reloadData","fetchCategoryDataList","componentDidMount","document","title","API_URL","userData","getUserDataFromLocalStorage","fetch","then","response","status","json","setTimeout","logoutProcedureForLocalStorage","Error","code","map","element","fetchBrandDataList","error","fetchProductDataList","product","category","brand","newProduct","CButton","MaterialReactTable","density","columns","enablePagination","editingMode","onEditingRowSave","exitEditingMode","handleSaveRowEdits","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","onSubmit","CIcon","Select","onChange","choice","options","CInputGroup","CInputGroupPrepend","CInputGroupText","CInput","placeholder","autoComplete","type","step","required","xs"],"mappings":"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","file":"static/js/20.94319666.chunk.js","sourcesContent":["import React from 'react';\nimport { CSpinner } from '@coreui/react';\n\nconst Failure = (props) =>\n    <div className=\"animated fadeIn pt-3 text-center text-danger\">\n      <i className=\"fa fa-warning\" style={{ color: \"red\", fontSize: \"40px\" }} />\n      <h2>We're Sorry.</h2>\n      {\n        (props.detailShow) && (\n            <div>\n              An Error has occurred, please refresh / reload the page.<br/>\n            </div>\n        )\n      }\n    </div >\n    ;\n\nconst Loading = () =>\n    <div className=\"animated fadeIn text-center\">\n        <br />\n        <div className=\"spinner-grow text-primary\" role=\"status\">\n        </div><br />\n        <div className=\"text-primary\">L O A D I N G</div>\n        {/* \n        <CSpinner color=\"primary\" size=\"sm\"/>\n        <div className=\"text-primary\">🚀 🚀 🚀 Please wait. ⌛ ⌛ ⌛</div>\n         */}\n        <br />\n    </div>\n    ;\n\nconst Success = () =>\n    <div className=\"animated fadeIn pt-3 text-center\">\n        <h1 className=\"spinner-grow text-success\" >\n        </h1>\n        <p className=\"text-success\">S U C C E S S</p>\n    </div>\n    ;\n\nexport {\n  Failure,\n  Loading,\n  Success\n};\n","const __SPACE__ = \" \";\nconst __BRACKET_PAIR__ = \"() \";\nconst __DOUBLE_COLON__ = \" : \";\nconst __CALLED__ = \"called\";\nconst __HYPHEN__ = \" - \";\n\nconst reloadPage = () => {\n    window.location.reload();\n};\n\n\nconst openPageInNewTab = (url) => {\n    window.open(url, \"_blank\");\n}\n\nconst getSearchResult = (tmkocAllEpisodes, searchString) => {\n    let searchPositiveEpisodes = [];\n\n    tmkocAllEpisodes.forEach((episode) => {\n        if (checkIfStringContainsPattern(episode.episode, searchString)) { searchPositiveEpisodes.push(episode); }\n        else if (checkIfStringContainsPattern(episode.shortDesc, searchString)) { searchPositiveEpisodes.push(episode); }\n\n    });\n\n    return searchPositiveEpisodes;\n\n}\n\nconst checkIfStringContainsPattern = (string, pattern) => {\n    string += \"\";\n    pattern += \"\";\n    string = string.toUpperCase();\n    pattern = pattern.toUpperCase();\n\n    return string.includes(pattern);\n}\n\nfunction humanFileSize(bytes, si=true, dp=1) {\n    const thresh = si ? 1000 : 1024;\n  \n    if (Math.abs(bytes) < thresh) {\n      return bytes + ' B';\n    }\n  \n    const units = si \n      ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] \n      : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    const r = 10**dp;\n  \n    do {\n      bytes /= thresh;\n      ++u;\n    } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);\n\n    return bytes.toFixed(dp) + ' ' + units[u];\n  }\n\n\n//logger 1.0\nconst Logger = (fileName, methodName, message = undefined, variableName = undefined, variableValue = undefined) => {\n    if(localStorage.logsEnabled !== 'true') \n        return;\n    \n    // File.js - callApi() called : some_message : userName :  apple_cat\n    let logData = fileName + __HYPHEN__ + methodName + __BRACKET_PAIR__ + __CALLED__ + __DOUBLE_COLON__;\n\n    (message) && (logData += (message + __DOUBLE_COLON__));\n\n    if (variableName) {\n        logData += (variableName + __DOUBLE_COLON__);\n        console.log(logData, variableValue);\n    }\n    else {\n        console.log(logData);\n    }\n}\n\nconst goBack = () => {\n    window.history.back();\n}\n\nconst goHome = () => {\n    window.open(\"/\" ,\"_self\");\n}\n\nconst isNullOrEmpty = (someString) => {\n    return (someString === null || someString.length < 0);\n}\n\nconst filterById = (jsonObject, id) => {\n    const result = jsonObject.filter(\n        jsonObject => (jsonObject['id'] == id)\n    );\n    return (result.length == 0) ? null : result[0];\n}\n\nconst copyStringToClipboard = (someStr) => {\n    //console.log('copyStringToClipboard() : someStr = ', someStr);\n    // alert('clipboard added = ' + someStr);\n    navigator.clipboard.writeText(someStr);\n}\n\nexport {\n    reloadPage,\n    getSearchResult,\n    openPageInNewTab,\n    humanFileSize,\n    Logger,\n    goBack,\n    goHome,\n    isNullOrEmpty,\n    filterById,\n    copyStringToClipboard\n}\n","const CONTENT_TYPE_JSON_STRING = \"application/json\";\n\nconst requestHeaderGET = () => {\n    return (\n        {\n            method: \"GET\",\n            headers: {\n            }\n        }\n    )\n};\n\nconst requestHeaderPOST = (data) => {\n    return (\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": CONTENT_TYPE_JSON_STRING\n            },\n            body: data\n        }\n    )\n};\n\nconst requestHeaderFilePOST = (data) => {\n    return (\n        {\n            method: \"POST\",\n            headers: {\n            },\n            body: data\n        }\n    )\n};\n\n//========== WITH AUTH HEADER ==========\n\nconst requestHeaderGETWithAuth = (authToken) => {\n    return (\n        {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": authToken\n            }\n        }\n    )\n};\n\nconst requestHeaderPOSTWithAuth = (data, authToken) => {\n    return (\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": CONTENT_TYPE_JSON_STRING,\n                \"Authorization\": authToken\n            },\n            body: data\n        }\n    )\n};\n\nconst requestHeaderPUTWithAuth = (data, authToken) => {\n    return (\n        {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": CONTENT_TYPE_JSON_STRING,\n                \"Authorization\": authToken\n            },\n            body: data\n        }\n    )\n};\n\nconst requestHeaderDELETEWithAuth = (data, authToken) => {\n    return (\n        {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": CONTENT_TYPE_JSON_STRING,\n                \"Authorization\": authToken\n            },\n            body: data\n        }\n    )\n};\n\n\nexport {\n    requestHeaderGET,\n    requestHeaderPOST,\n    requestHeaderFilePOST,\n\n    requestHeaderGETWithAuth,\n    requestHeaderPOSTWithAuth,\n    requestHeaderPUTWithAuth,\n    requestHeaderDELETEWithAuth\n };","import React, { Component } from 'react';\nimport { Modal, ModalBody} from 'reactstrap';\nimport { Failure, Loading, Success } from '../Statuses/Statuses';\n\n//props : visible , toggleVisibility , loadingModalState\n\nclass StatusModal extends Component {\n    render() {\n        let basic = <div></div>;\n        if (this.props.loadingModalState == 0) {\n        basic = <Loading />;\n        }\n        else if (this.props.loadingModalState == 1) {\n        basic = <Success />;\n        }\n        else {\n        basic = <Failure />;\n        }\n\n        return (\n        <Modal isOpen={this.props.visible} backdrop={\"static\"} className={'modal-primary'}>\n            <ModalBody>\n            <div className=\"animated fadeIn pt-3 text-center\">\n                {basic}\n            </div>\n            </ModalBody>\n        </Modal>\n        );\n    }\n}\n\nexport default StatusModal;","import React, { Component } from 'react';\nimport { Button, Modal, ModalBody, ModalFooter} from 'reactstrap';\nimport { goBack, goHome, reloadPage } from '../../Utils/Utils';\nimport { Failure } from '../Statuses/Statuses';\n\nclass FailureModal extends Component {\n    render() {\n        return(\n            <Modal isOpen={this.props.visible} backdrop={\"static\"} className={'modal-danger'}>\n            <ModalBody>\n              <div className=\"animated fadeIn pt-3 text-center\">\n                <Failure detailShow={true} />\n              </div>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"secondary\" onClick={goBack}>BACK</Button>\n              &nbsp;&nbsp;\n              <Button color=\"secondary\" onClick={reloadPage}>RELOAD</Button>\n              &nbsp;&nbsp;\n              <Button color=\"secondary\">LOGOUT</Button>\n              &nbsp;&nbsp;\n              <Button color=\"primary\" onClick={goHome}>HOME</Button>\n            </ModalFooter>\n          </Modal>\n      );\n    }\n}\n\nexport default FailureModal;\n","\n\nconst BACKEND_BASE_URL          = \"https://backend.satanlabs.com\";\nconst BACKEND_AUTH_APP_BASE_URL = \"https://backend.satanlabs.com/auth-chowkidar\";\nconst BACKEND_NEXUS_APP_BASE_URL = \"https://backend.satanlabs.com/nexus/\";\nconst BACKEND_WEIGHT_SERVICE_BASE_URL = \"https://backend.satanlabs.com/nexus/weight\";\nconst BACKEND_PRICE_TRACKER_SERVICE_BASE_URL = \"https://backend.satanlabs.com/nexus/price_tracker\";\n//const BACKEND_PRICE_TRACKER_SERVICE_BASE_URL = \"http://localhost:7979/nexus/price_tracker\";\n\n\nexport {\n    BACKEND_AUTH_APP_BASE_URL,\n    BACKEND_WEIGHT_SERVICE_BASE_URL,\n    BACKEND_PRICE_TRACKER_SERVICE_BASE_URL\n}","/* Contains all the enums */\n\nconst fileTypeArray = [\n    {\n        id: 1,\n        commonName: \"pdf\",\n        shortForm: \"PDF\",\n        fullForm: \"Portable Document Format\"\n    },\n    {\n        id: 2,\n        commonName: \"xls\",\n        shortForm: \"XLS\",\n        fullForm: \"Microsoft Excel file\"\n    },\n    {\n        id: 3,\n        commonName: \"csv\",\n        shortForm: \"CSV\",\n        fullForm: \"Comma-Separated Values\"\n    }\n];\n\nconst getFileTypeById = (id) => {\n    return fileTypeArray.find((fileType, index) => {\n        return fileType.id == id;\n    })\n};\nconst getFileTypeByName = (name) => {\n    return fileTypeArray.find((fileType, index) => {\n        return fileType.name == name;\n    })\n};\n\n\n/* EXPENSE related enums */\n\n\nconst unitOfMeasurementsList = [\n    {\n        value:\"MILLILITER\",\n        label: \"MILLILITER 💧\"\n    },\n    {\n        value:\"GRAM\",\n        label: \"GRAM 🍎\"\n    },\n    {\n        value:\"COUNT\",\n        label: \"COUNT 🥚\"\n    }\n];\n\nconst categoryTypesList = [\n    {\n        value:\"ON_DEMAND\",\n        label: \"ON_DEMAND\"\n    },\n    {\n        value:\"BILL\",\n        label: \"BILL\"\n    }\n];\n\nconst commodityTypesList = [\n    {\n        value:\"PRODUCT\",\n        label: \"PRODUCT 🍎\"\n    },\n    {\n        value:\"SERVICE\",\n        label: \"SERVICE\"\n    }\n];\n\nconst yesAndNoList = [\n    {\n        value:\"YES\",\n        label: \"YES ✅\",\n        backendValue: true\n    },\n    {\n        value:\"NO\",\n        label: \"NO ❌\",\n        backendValue: false\n    }\n];\n\nconst paymentInstrumentsList = [\n    {\n        value:\"UPI\",\n        label: \"UPI 🇮🇳 🧾\"\n    },\n    {\n        value:\"NET_BANKING\",\n        label: \"NET BANKING 🔗\"\n    },\n    {\n        value:\"CREDIT_CARD\",\n        label: \"CREDIT CARD 💳 \"\n    },\n    {\n        value:\"DEBIT_CARD\",\n        label: \"DEBIT CARD 💳 🏧\"\n    },\n    {\n        value:\"CASH\",\n        label: \"CASH 💰 💵\"\n    },\n];\n\n\nconst paymentBanksList = [\n    {\n        value:\"SBI\",\n        label: \"SBI\"\n    },\n    {\n        value:\"AXIS\",\n        label: \"AXIS\"\n    },\n];\n\nconst expenseModesList  = [\n    {\n        value:\"ONLINE\",\n        label: \"ONLINE 🔗\"\n    },\n    {\n        value:\"STORE_BOUGHT\",\n        label: \"STORE_BOUGHT 🏪\"\n    },\n];\n\nexport {\n    fileTypeArray,\n    getFileTypeById,\n    getFileTypeByName,\n\n    unitOfMeasurementsList,\n    categoryTypesList,\n    commodityTypesList,\n    yesAndNoList,\n\n    paymentInstrumentsList,\n    paymentBanksList,\n    expenseModesList\n\n};\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { requestHeaderDELETEWithAuth, requestHeaderGETWithAuth, requestHeaderPOSTWithAuth } from 'src/Rest-API/Header';\nimport { getUserDataFromLocalStorage, logoutProcedureForLocalStorage } from 'src/Utils/AuthRelatedThings';\nimport { Logger, getSearchResult, openPageInNewTab, reloadPage, goHome, filterById } from '../../Utils/Utils';\nimport { Loading } from '../Statuses/Statuses';\nimport Table from 'react-bootstrap/Table';\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CCardGroup,\n    CCol,\n    CContainer,\n    CForm,\n    CInput,\n    CInputGroup,\n    CInputGroupPrepend,\n    CInputGroupText,\n    CRow,\n    CTextarea\n  } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport StatusModal from '../Modals/StatusModal';\nimport FailureModal from '../Modals/FailureModal';\nimport { brandSet } from '@coreui/icons';\nimport MaterialReactTable from 'material-react-table';\nimport Select from 'react-select';\nimport { yesAndNoList } from 'src/Utils/Enums';\nimport { BACKEND_PRICE_TRACKER_SERVICE_BASE_URL } from 'src/Rest-API/EnvironmentSpecificThings';\n\n//default\nconst FILE_NAME = \"Product.js\";\n\n//default\nconst initialState = {\n    isLoaded: false,\n    loadingModalVisible: false,\n    loadingModalState: 0,\n    failureModalVisible: false,\n    categoryListData: [],\n    brandListData: [],\n    productListData: [],\n    categoryListDataSelectTagSpecific: [],\n    brandListDataSelectTagSpecific: [],\n    newProductData: {\n        categoryId: null,\n        brandId: null\n    }\n};\n\nconst tableColumnData = [\n    {\n        accessorKey: 'id',\n        header: 'ID',\n        enableEditing: false,\n    },\n    {\n        accessorKey: 'name',\n        header: 'name',\n        enableEditing: true,\n    },\n    {\n        accessorKey: 'category',\n        header: 'category',\n        enableEditing: true,\n        Cell: ({ renderedCellValue, row }) => (renderedCellValue.name + \" [ \" + renderedCellValue.unitOfMeasurement + \" ][\" + renderedCellValue.id + \"]\")\n    },\n    {\n        accessorKey: 'brand',\n        header: 'Brand',\n        enableEditing: true,\n        Cell: ({ renderedCellValue, row }) => ((renderedCellValue === null) ? \"NO-BRAND 🚫\" : renderedCellValue.name + \" [\" + renderedCellValue.id + \"]\")\n    },\n    \n    \n    {\n        accessorKey: 'createdAt',\n        header: 'Created At',\n        enableEditing: false,\n        Cell: ({ renderedCellValue, row }) => (moment(renderedCellValue).zone('IST').format('YYYY/MM/DD HH:mm:ss ddd'))\n    },\n    {\n        accessorKey: 'updatedAt',\n        header: 'Updated At',\n        enableEditing: false,\n        Cell: ({ renderedCellValue, row }) => (moment(renderedCellValue).zone('IST').format('YYYY/MM/DD HH:mm:ss ddd'))\n    },\n];\n\n\nclass Product extends Component {\n\n    //default\n    constructor(props) {\n        super(props);\n        this.state = JSON.parse(JSON.stringify(initialState));\n    }\n\n    //default\n    resetStateToDefault() {\n        this.setState(JSON.parse(JSON.stringify(initialState)));\n    }\n\n    //default\n    reloadData() {\n        this.resetStateToDefault();\n        this.fetchCategoryDataList();\n    }\n\n    //default\n    componentDidMount() {\n        document.title = \"Expenses - Product\";\n        this.fetchCategoryDataList();\n    }\n\n    fetchCategoryDataList() {\n        let API_URL = BACKEND_PRICE_TRACKER_SERVICE_BASE_URL + '/category/list?offset=0&from=admin-portal';\n        const userData = getUserDataFromLocalStorage();\n\n        fetch(API_URL, requestHeaderGETWithAuth(userData.authToken))\n        .then(response => {\n            if(response.status === 200)\n                return response.json();\n            if(response.status === 401) {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n                setTimeout(() => {\n                    logoutProcedureForLocalStorage();\n                    reloadPage();\n                }, 500);\n            } else {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n            throw new Error(\"HTTP status is \" + response.status);\n        })\n        .then(\n            (result) => {\n                Logger(FILE_NAME, \"fetchCategoryDataList\", \"FETCH_1\", \"result\", result);\n                if(result.code === 1001) {\n                    //success\n                    const categoryListDataSelectTagSpecific = result.data.map((element) => {\n                        return {\n                            value: element.id,\n                            label: element.name + \" [**\" + element.unitOfMeasurement + \"]\"\n                        };\n                    });\n                    this.setState({\n                        categoryListData: result.data,\n                        categoryListDataSelectTagSpecific\n                    });\n                    this.fetchBrandDataList();\n                } else {\n                    //something horrible happened\n                    this.setState({\n                        loadingModalVisible: false,\n                        loadingModalState: 0,\n                        failureModalVisible: true\n                    });\n                }\n            },\n            (error) => {\n                Logger(FILE_NAME, \"fetchCategoryDataList\", \"FETCH_1\", \"error\", error);\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n        );\n    }\n\n    fetchBrandDataList() {\n        let API_URL = BACKEND_PRICE_TRACKER_SERVICE_BASE_URL + '/brand/list?offset=0&from=admin-portal';\n        const userData = getUserDataFromLocalStorage();\n\n        fetch(API_URL, requestHeaderGETWithAuth(userData.authToken))\n        .then(response => {\n            if(response.status === 200)\n                return response.json();\n            if(response.status === 401) {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n                setTimeout(() => {\n                    logoutProcedureForLocalStorage();\n                    reloadPage();\n                }, 500);\n            } else {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n            throw new Error(\"HTTP status is \" + response.status);\n        })\n        .then(\n            (result) => {\n                Logger(FILE_NAME, \"fetchBrandDataList\", \"FETCH_1\", \"result\", result);\n                if(result.code === 1001) {\n                    //success\n                    const brandListDataSelectTagSpecific = result.data.map((element) => {\n                        return {\n                            value: element.id,\n                            label: element.name\n                        };\n                    });\n                    this.setState({\n                        brandListData: result.data,\n                        brandListDataSelectTagSpecific\n                    });\n                    this.fetchProductDataList();\n                } else {\n                    //something horrible happened\n                    this.setState({\n                        loadingModalVisible: false,\n                        loadingModalState: 0,\n                        failureModalVisible: true\n                    });\n                }\n            },\n            (error) => {\n                Logger(FILE_NAME, \"fetchBrandDataList\", \"FETCH_1\", \"error\", error);\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n        );\n    }\n\n    fetchProductDataList() {\n        let API_URL = BACKEND_PRICE_TRACKER_SERVICE_BASE_URL + '/product/list?offset=0&from=admin-portal';\n        const userData = getUserDataFromLocalStorage();\n\n        fetch(API_URL, requestHeaderGETWithAuth(userData.authToken))\n        .then(response => {\n            if(response.status === 200)\n                return response.json();\n            if(response.status === 401) {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n                setTimeout(() => {\n                    logoutProcedureForLocalStorage();\n                    reloadPage();\n                }, 500);\n            } else {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n            throw new Error(\"HTTP status is \" + response.status);\n        })\n        .then(\n            (result) => {\n                Logger(FILE_NAME, \"fetchProductDataList\", \"FETCH_1\", \"result\", result);\n                if(result.code === 1001) {\n                    //success\n                    const productListData = result.data.map(product => {\n                        product.category = filterById(this.state.categoryListData, product.categoryId);\n                        product.brand = filterById(this.state.brandListData, product.brandId);\n                        return product;\n                    });\n                    this.setState({\n                        isLoaded: true,\n                        productListData\n                    });\n                } else {\n                    //something horrible happened\n                    this.setState({\n                        loadingModalVisible: false,\n                        loadingModalState: 0,\n                        failureModalVisible: true\n                    });\n                }\n            },\n            (error) => {\n                Logger(FILE_NAME, \"fetchProductDataList\", \"FETCH_1\", \"error\", error);\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n        );\n    }\n\n    submitCreateProductForm = (event) => {\n        event.preventDefault();\n\n        let reqData = {\n            name: event.target.inputName.value\n        };\n\n        if(this.doesStateContainAllRequiredProductParams() === false) {\n            alert(\"Please fill all unfilled items in the form\");\n            return;\n        }\n        reqData.categoryId = this.state.newProductData.categoryId;\n        reqData.brandId = this.state.newProductData.brandId;\n\n        this.setState({\n            loadingModalVisible: true,\n            loadingModalState: 0\n        });\n\n        this.callCreateProductApi(reqData);\n    }\n\n    doesStateContainAllRequiredProductParams() {\n        return (this.state.newProductData.categoryId !== null && this.state.newProductData.brandId !== null);\n    }\n\n    callCreateProductApi(newProduct) {\n        let API_URL = BACKEND_PRICE_TRACKER_SERVICE_BASE_URL + '/product/save?offset=0&from=admin-portal';\n        const userData = getUserDataFromLocalStorage();\n        fetch(API_URL, requestHeaderPOSTWithAuth(JSON.stringify(newProduct), userData.authToken))\n        .then(response => {\n            if(response.status === 200)\n                return response.json();\n            if(response.status === 401) {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n                setTimeout(() => {\n                    logoutProcedureForLocalStorage();\n                    reloadPage();\n                }, 500);\n            } else {\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n            throw new Error(\"HTTP status is \" + response.status);\n        })\n        .then(\n            (result) => {\n                Logger(FILE_NAME, \"callCreateProductApi\", \"FETCH_1\", \"result\", result);\n                if(result.code === 1001) {\n                    //success\n                    this.setState({\n                        loadingModalState: 1,\n                    });\n                    setTimeout(() => {this.reloadData();}, 200);\n                } else {\n                    //something horrible happened\n                    this.setState({\n                        loadingModalVisible: false,\n                        loadingModalState: 0,\n                        failureModalVisible: true\n                    });\n                }\n            },\n            (error) => {\n                Logger(FILE_NAME, \"callCreateProductApi\", \"FETCH_1\", \"error\", error);\n                this.setState({\n                    loadingModalVisible: false,\n                    loadingModalState: 0,\n                    failureModalVisible: true\n                });\n            }\n        );\n    }\n\n    //default\n    render() {\n        //default\n        Logger(FILE_NAME, \"render\", \"\", \"this.state\", this.state);\n\n        return (\n            this.state.isLoaded ? \n            <div>\n                <h1>PRODUCT &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n                    <CButton color=\"success\" className=\"px-4\" onClick={() => this.reloadData()}>Reload Data</CButton>\n                </h1>\n                <br />\n\n                {\n                this.state.isLoaded ?\n                    <MaterialReactTable\n                        initialState={{ density: 'compact' }}\n                        columns={tableColumnData} \n                        data={this.state.productListData}\n                        enablePagination = {true}\n\n                        editingMode={\"row\"}\n                        enableEditing\n                        onEditingRowSave={(exitEditingMode) => this.handleSaveRowEdits(exitEditingMode)}\n                    /> : <br/>\n                }\n\n                <br /><br />\n\n                {\n                /* Create new product */\n                <CContainer>\n                <CRow className=\"justify-content-center\">\n                <CCol md=\"8\">\n                    <CCardGroup>\n                    <CCard className=\"p-4\">\n                        <CCardBody>\n                        <CForm onSubmit={this.submitCreateProductForm}>\n                            <h1>Save a new Product</h1>\n\n                            <CIcon name=\"cilPencil\" /> <b>Brand :</b>\n                            <br />\n                            <Select \n                                onChange={(choice) => {\n                                    const newProductData = this.state.newProductData;\n                                    newProductData.brandId = choice.value;\n                                    this.setState({\n                                        newProductData\n                                    });\n                                }}\n                                options={this.state.brandListDataSelectTagSpecific}\n                            />\n                            <br />\n\n                            <CIcon name=\"cilPencil\" /> <b>Category :</b>\n                            <br />\n                            <Select \n                                onChange={(choice) => {\n                                    const newProductData = this.state.newProductData;\n                                    newProductData.categoryId = choice.value;\n                                    this.setState({\n                                        newProductData\n                                    });\n                                }}\n                                options={this.state.categoryListDataSelectTagSpecific}\n                            />\n                            <br />\n\n                            <CInputGroup className=\"mb-3\">\n                                <CInputGroupPrepend>\n                                    <CInputGroupText>\n                                    <CIcon name=\"cilPencil\" />\n                                    </CInputGroupText>\n                                </CInputGroupPrepend>\n                                <CInput\n                                    placeholder=\"Product Name\" \n                                    autoComplete=\"on\"\n                                    type=\"text\"\n                                    step=\"any\"\n                                    id=\"inputName\"\n                                    label=\"Product Name\"\n                                    required\n                                />\n                            </CInputGroup>\n\n                            <CRow>\n                                <CCol xs=\"6\">\n                                    <CButton color=\"success\" className=\"px-4\" type='submit'>SAVE</CButton>\n                                </CCol>\n                                <CCol xs=\"6\" className=\"text-right\">\n                                    <CButton color=\"danger\" className=\"px-0\" onClick={() => this.reloadData()}>&nbsp;Reset values&nbsp;</CButton>\n                                </CCol>\n                            </CRow>\n                        </CForm>\n                        </CCardBody>\n                    </CCard>\n                    </CCardGroup>\n                </CCol>\n                </CRow>\n                </CContainer>\n                }\n\n                {/* //default */}\n                <StatusModal visible={this.state.loadingModalVisible} loadingModalState={this.state.loadingModalState} />\n                <FailureModal visible={this.state.failureModalVisible} />\n            </div>\n            : <Loading />\n        );\n    }\n}\n\nexport default Product;\n"],"sourceRoot":""}