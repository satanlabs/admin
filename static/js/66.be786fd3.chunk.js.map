{"version":3,"sources":["reusable/DocsLink.js","views/notifications/toaster/Toaster.js"],"names":["DocsLink","props","name","text","rest","href","concat","_jsx","className","children","CLink","rel","target","React","memo","Toaster","toasts","setToasts","useState","position","autohide","setPosition","setAutohide","autohideValue","setAutohideValue","closeButton","setCloseButton","fade","setFade","toasters","reduce","toast","push","_jsxs","CCard","CCardHeader","CCardBody","CContainer","CRow","CCol","sm","lg","CForm","CFormGroup","variant","CInputCheckbox","id","checked","onChange","e","custom","CLabel","htmlFor","CInput","type","value","Number","map","i","CButton","color","onClick","addToast","Object","keys","toasterKey","CToaster","key","CToast","show","CToastHeader","CToastBody"],"mappings":"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","file":"static/js/66.be786fd3.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n  CForm,\n  CInput,\n  CInputCheckbox,\n  CButton,\n  CContainer,\n  CRow,\n  CCol,\n  CFormGroup,\n  CLabel\n} from '@coreui/react'\nimport { DocsLink } from 'src/reusable'\n\nconst Toaster = () => {\n\n  const positions = [\n    'static',\n    'top-left',\n    'top-center',\n    'top-right',\n    'top-full',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n    'bottom-full'\n  ]\n\n  const [toasts, setToasts] = useState([\n    { position: 'static'},\n    { position: 'static'},\n    { position: 'top-right', autohide: 3000 }\n  ])\n\n  const [position, setPosition] = useState('top-right')\n  const [autohide, setAutohide] = useState(true)\n  const [autohideValue, setAutohideValue] = useState(5000)\n  const [closeButton, setCloseButton] = useState(true)\n  const [fade, setFade] = useState(true)\n\n  const addToast = () => {\n    setToasts([\n      ...toasts, \n      { position, autohide: autohide && autohideValue, closeButton, fade }\n    ])\n  }\n\n\n  const toasters = (()=>{\n    return toasts.reduce((toasters, toast) => {\n      toasters[toast.position] = toasters[toast.position] || []\n      toasters[toast.position].push(toast)\n      return toasters\n    }, {})\n  })()\n\n\n  return (\n    <CCard>\n      <CCardHeader>\n        Toasts.\n        <DocsLink name=\"-Toast\"/>\n      </CCardHeader>\n      <CCardBody>\n        <CContainer>\n          <CRow>\n            <CCol sm=\"12\" lg=\"6\">\n              <CForm>\n                <h5>Add toast with following props:</h5>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2 mt-4\">\n                  <CInputCheckbox\n                    id=\"autohide\"\n                    checked={autohide}\n                    onChange={e => { setAutohide(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"autohide\">\n                    Autohide of the toast\n                  </CLabel>\n                </CFormGroup>\n                {\n                  autohide &&\n                  <CFormGroup className=\"my-2\">\n                    <CLabel htmlFor=\"ccyear\">Time to autohide</CLabel>\n                    <CInput\n                      type=\"number\"\n                      value={autohideValue}\n                      onChange={e => {\n                        setAutohideValue(Number(e.target.value))\n                      }}\n                    />\n                  </CFormGroup>\n                }\n\n                <CFormGroup className=\"my-2\">\n                  <CLabel htmlFor=\"ccyear\">Position</CLabel>\n                  <select\n                    className=\"form-control\"\n                    value={position}\n                    onChange={e => {setPosition(e.target.value)}}\n                  >\n                    {\n                      positions.map((position, i)=>(\n                        <option key={i}>{position}</option>\n                      ))\n                    }\n                  </select>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"fade\"\n                    checked={fade}\n                    onChange={e => { setFade(e.target.checked) }}\n                    custom\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"fade\">fade</CLabel>\n                </CFormGroup>\n\n                <CFormGroup variant=\"custom-checkbox\" className=\"my-2\">\n                  <CInputCheckbox\n                    id=\"close\"\n                    custom\n                    checked={closeButton}\n                    onChange={e=> { setCloseButton(e.target.checked) }}\n                  />\n                  <CLabel variant=\"custom-checkbox\" htmlFor=\"close\">\n                    closeButton\n                  </CLabel>\n                </CFormGroup>\n\n                <CButton\n                  className=\"mr-1 w-25\"\n                  color=\"success\"\n                  onClick={addToast}\n                >\n                  Add toast\n                </CButton>\n\n              </CForm>\n            </CCol>\n            <CCol sm=\"12\" lg=\"6\">\n              {Object.keys(toasters).map((toasterKey) => (\n                <CToaster\n                  position={toasterKey}\n                  key={'toaster' + toasterKey}\n                >\n                  {\n                    toasters[toasterKey].map((toast, key)=>{\n                    return(\n                      <CToast\n                        key={'toast' + key}\n                        show={true}\n                        autohide={toast.autohide}\n                        fade={toast.fade}\n                      >\n                        <CToastHeader closeButton={toast.closeButton}>\n                          Toast title\n                        </CToastHeader>\n                        <CToastBody>\n                          {`This is a toast in ${toasterKey} positioned toaster number ${key + 1}.`}\n                        </CToastBody>\n                      </CToast>\n                    )\n                  })\n                  }\n                </CToaster>\n              ))}\n            </CCol>\n          </CRow>\n        </CContainer>\n      </CCardBody>\n    </CCard>\n  )\n}\n\nexport default Toaster\n"],"sourceRoot":""}